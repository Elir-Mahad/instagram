{"version":3,"sources":["firebase.js","Post.js","ImageUpload.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","storage","auth","Post","ImageUpload","username","useState","image","setImage","progress","setProgress","caption","setCaption","className","value","max","type","placeholder","onChange","event","target","e","files","Button","onClick","ref","name","put","on","snapshot","Math","round","bytesTransferred","totalBytes","error","console","log","child","getDownloadURL","then","url","collection","add","timestamp","FieldValue","serverTimestamp","imageUrl","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","App","classes","posts","setPosts","modalStyle","openSignUp","setOpenSignUp","openSignIn","setOpenSignIn","setUsername","email","setEmail","password","setPassword","user","setUser","useEffect","unsubscribe","onAuthStateChanged","authUser","orderBy","onSnapshot","docs","map","doc","id","post","data","Modal","open","onClose","style","src","alt","Input","preventDefault","createUserWithEmailAndPassword","updateProfile","displayName","catch","alert","message","signInWithEmailAndPassword","signOut","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f745648f.chunk.js","sourcesContent":["import firebase from \"firebase\";\n\nconst firebaseApp = firebase.initializeApp({\n\tapiKey: \"AIzaSyDd8KSUe2F6AS2WXSqwKKIXLKDxKFfjtm4\",\n\tauthDomain: \"instagram-a3c9d.firebaseapp.com\",\n\tdatabaseURL: \"https://instagram-a3c9d.firebaseio.com\",\n\tprojectId: \"instagram-a3c9d\",\n\tstorageBucket: \"instagram-a3c9d.appspot.com\",\n\tmessagingSenderId: \"729329518783\",\n\tappId: \"1:729329518783:web:0154d95c1eb23d02429e0a\",\n\tmeasurementId: \"G-Z3NXSRWP0Q\"\n});\n\nconst db = firebaseApp.firestore();\n// to access the database - for storing data\nconst auth = firebase.auth();\n// to access the authentication - for logging in and out\nconst storage = firebase.storage();\n// to access the storage - for uploading content\n\nexport { firebase, db, auth, storage };\n","import React, { useState, useEffect } from \"react\";\nimport \"./Post.css\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport { db } from \"./firebase\";\nimport firebase from \"firebase\";\n\nfunction Post({ postId, user, username, caption, imageUrl }) {\n\t//! -------------- ALL USESTATES BELOW\n\n\tconst [comments, setComments] = useState([]);\n\t// (comments)  The constant comments contains an array\n\t// (setComments) And we declare that we will mainpulate this array\n\t// By wrapping the array in a UseState()\n\tconst [comment, setComment] = useState(\"\");\n\n\t//! --------------- USE EFFECT BELOW - for fetching comments\n\n\t// anytime a new comment is added to a specific post\n\n\tuseEffect(() => {\n\t\t//\n\t\tlet unsubscribe;\n\t\tif (postId) {\n\t\t\t// if there is a postId for the post on which the comment has occured then:\n\t\t\tunsubscribe = db\n\t\t\t\t// [a] enter the database\n\t\t\t\t.collection(\"posts\")\n\t\t\t\t// [b] access the collection called posts\n\t\t\t\t.doc(postId)\n\t\t\t\t// [c] access the post id of the post\n\t\t\t\t.collection(\"comments\")\n\t\t\t\t// [d] access the collection called comments inside the post\n\t\t\t\t.orderBy(\"timestamp\", \"desc\")\n\t\t\t\t// [e] order the posts based on timestamp in descending order (top post = most recent post)\n\t\t\t\t.onSnapshot((snapshot) => {\n\t\t\t\t\tsetComments(snapshot.docs.map((doc) => doc.data()));\n\t\t\t\t\t// [f] get a snapshot\n\t\t\t\t});\n\t\t}\n\t\treturn () => {\n\t\t\tunsubscribe();\n\t\t};\n\t\t// we are using the postId variable inside the useEffect, and therefore we have to include it as a dependency below\n\t}, [postId]);\n\n\tconst postComment = (event) => {\n\t\t// this function will be able to submit user comment in the database to that specific post\n\t\tevent.preventDefault();\n\n\t\tdb\n\t\t\t// [a] enter the database\n\t\t\t.collection(\"posts\")\n\t\t\t// [b] access the collection called posts\n\t\t\t.doc(postId)\n\t\t\t// [c] access the post id of the post\n\t\t\t.collection(\"comments\")\n\t\t\t// [d] access the collection called comments inside the post\n\t\t\t.add({\n\t\t\t\t// add to the post\n\t\t\t\ttext: comment,\n\t\t\t\t// the comment\n\t\t\t\tusername: user.displayName,\n\t\t\t\t// the username\n\t\t\t\ttimestamp: firebase.firestore.FieldValue.serverTimestamp()\n\t\t\t\t// the timestamp - this is useful for storing all code based on the correct timing\n\t\t\t});\n\t\tsetComment(\"\");\n\t};\n\n\treturn (\n\t\t<div className=\"post\">\n\t\t\t<div className=\"post_header\">\n\t\t\t\t{/* Below is the avatar and username*/}\n\t\t\t\t<Avatar\n\t\t\t\t\tclassName=\"post_avatar\"\n\t\t\t\t\t// alt={username}\n\t\t\t\t\talt=\"max\"\n\t\t\t\t\tsrc=\"/static/images/avatar/1/.jpg\"\n\t\t\t\t/>\n\t\t\t\t<h3>{username}</h3>\n\t\t\t</div>\n\t\t\t{/*  Below is the image */}\n\t\t\t<img className=\"post_image\" src={imageUrl} alt=\"\" />\n\t\t\t{/*  Below is the caption */}\n\t\t\t<h4 className=\"post_text\">\n\t\t\t\t<strong>{username}</strong> {caption}\n\t\t\t</h4>\n\t\t\t{/* below is the comment */}\n\t\t\t<div className=\"post_comments\">\n\t\t\t\t{comments.map((comment) => (\n\t\t\t\t\t// map/loop through each comment\n\t\t\t\t\t<p>\n\t\t\t\t\t\t<strong>{comment.username}</strong>\n\t\t\t\t\t\t{/* display the username */}\n\t\t\t\t\t\t{comment.text}\n\t\t\t\t\t\t{/* display the comment */}\n\t\t\t\t\t</p>\n\t\t\t\t))}\n\t\t\t</div>\n\n\t\t\t{user && (\n\t\t\t\t// if the user is logged in display the below comment box form\n\t\t\t\t<form className=\"post_commentBox\">\n\t\t\t\t\t<input\n\t\t\t\t\t\tclassName=\"post_input\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tplaceholder=\"Add a comment\"\n\t\t\t\t\t\tvalue={comment}\n\t\t\t\t\t\tonChange={(e) => setComment(e.target.value)}\n\t\t\t\t\t\t// onChange is a function that fires of an event\n\t\t\t\t\t\t// (e.target.value) the event will target the value (i.e, grab the typed comment)\n\t\t\t\t\t\t// (setComment) and store this value as the comment (i.e, line before onChange function)\n\t\t\t\t\t/>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"post_button\"\n\t\t\t\t\t\tdisabled={!comment}\n\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\tonClick={postComment}\n\t\t\t\t\t>\n\t\t\t\t\t\tpost\n\t\t\t\t\t</button>\n\t\t\t\t</form>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\nexport default Post;\n","import React, { useState } from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport { storage, db } from \"./firebase.js\";\nimport { firebase } from \"./firebase.js\";\nimport \"./ImageUpload.css\";\n\nfunction ImageUpload({ username }) {\n\t//! -------------- ALL USESTATES BELOW\n\n\tconst [image, setImage] = useState(null);\n\t// (image) The constant image contains nothing\n\t// (setImage) And we declare that we will mainpulate whatever ends up inside it\n\t// By wrapping the string in a UseState()\n\n\tconst [progress, setProgress] = useState(0);\n\t// (progress) The constant progress contains a number\n\t// (setProgress) And we declare that we will mainpulate this number\n\t// By wrapping the string in a UseState()\n\n\tconst [caption, setCaption] = useState(\"\");\n\t// (caption) The constant username contains a string\n\t// (setCaption) And we declare that we will mainpulate this string\n\t// By wrapping the string in a UseState()\n\n\t//! THIS IS THE FUNCTION FOR GETTING IMAGE AND CAPTION FROM THE USER PC\n\n\tconst handleChange = (e) => {\n\t\t// handleChange is a function that fires off an event\n\t\tif (e.target.files[0]) {\n\t\t\t// get the first file that you selected\n\t\t\tsetImage(e.target.files[0]);\n\t\t\t// set (insert) that file in the image constant\n\t\t}\n\t};\n\n\t//! THIS IS THE FUNCTION FOR UPLOADING USER IMAGE AND CAPTION TO THE FIREBASE AND THEN DISPLAYING THEM ON THE WEB PAGE\n\n\tconst handleUpload = () => {\n\t\tconst uploadTask = storage.ref(`images/${image.name}`).put(image);\n\t\t// The constant uploadTask stores code that uploads images into firebase\n\t\t// [a] Access the storage in firebase.\n\t\t// [b] Get a reference (a unique identifier) for this new photo.\n\t\t// [c] Identify the Image name as the file name that we selected.\n\t\t// [d] Put the 'image' that you grabbed into 'images' (insert it into the firebase document)\n\n\t\tuploadTask.on(\n\t\t\t\"state_changed\",\n\t\t\t(snapshot) => {\n\t\t\t\t// on \"state_changed\" (ie, when state changes --> any change occurs) give me a snapshot\n\t\t\t\t// And as it changes, and gets updated, give me continous snapshots\n\t\t\t\tconst progress = Math.round(\n\t\t\t\t\t// The constant progress stores a math equation\n\t\t\t\t\t// that could transform these continuous snapshots into a progress indicator\n\t\t\t\t\t(snapshot.bytesTransferred / snapshot.totalBytes) * 100\n\t\t\t\t\t// This equation is going to use the range of numbers from 0 and 100,\n\t\t\t\t\t// and it will output a specific number (between 0 and 100)\n\t\t\t\t\t// and this number will indicate progress\n\t\t\t\t);\n\t\t\t\tsetProgress(progress);\n\t\t\t\t// display the progress number from 0 to 100\n\t\t\t},\n\t\t\t(error) => {\n\t\t\t\t// if there is an error then console.log the error\n\t\t\t\tconsole.log(error);\n\t\t\t\t// alert(error.message);\n\t\t\t},\n\n\t\t\t() => {\n\t\t\t\t// if the uploadTask function is executed successfuly and there are no errors\n\t\t\t\t// the next task is to get a 'download url' for the image that was just uploaded by the user.\n\t\t\t\t// We an achieve this task by :\n\t\t\t\tstorage\n\t\t\t\t\t// [a] Summon the storage in firebase and then enter the storage\n\t\t\t\t\t.ref(\"images\")\n\t\t\t\t\t// [b] find the reference for the images\n\t\t\t\t\t.child(image.name)\n\t\t\t\t\t// [c] find to the image named child (i.e, the image that was just uploaded)\n\t\t\t\t\t.getDownloadURL()\n\t\t\t\t\t// [d] create a download url for that image and then get that url\n\n\t\t\t\t\t.then((url) => {\n\t\t\t\t\t\t// then take this url\n\t\t\t\t\t\tdb\n\t\t\t\t\t\t\t// enter the firebase database\n\t\t\t\t\t\t\t.collection(\"posts\")\n\t\t\t\t\t\t\t// post the image inside of the database collection posts\n\t\t\t\t\t\t\t.add({\n\t\t\t\t\t\t\t\t// add to the post\n\t\t\t\t\t\t\t\ttimestamp: firebase.firestore.FieldValue.serverTimestamp(),\n\t\t\t\t\t\t\t\t// this is useful for storing all code based on the correct timing\n\t\t\t\t\t\t\t\tcaption: caption,\n\t\t\t\t\t\t\t\timageUrl: url,\n\t\t\t\t\t\t\t\t// This is the downloaded url .then(url)\n\t\t\t\t\t\t\t\t// Its important to pay attention to how we are getting this image\n\t\t\t\t\t\t\t\t// [1] In the function handleUpload, we uploaded the image to the firebase storage\n\t\t\t\t\t\t\t\t// [2] We used --> .getDownloadURL() ---> to get a download link\n\t\t\t\t\t\t\t\t// [3] We are now using the download link, to post the image\n\t\t\t\t\t\t\t\tusername: username\n\t\t\t\t\t\t\t\t// The username is inside the app.js\n\t\t\t\t\t\t\t\t// We want to get it from the app.js and deposit it here\n\t\t\t\t\t\t\t\t// To do that, we are going insert 'username' as a prop into the ImageUpload component (top of this file)\n\t\t\t\t\t\t\t\t// like this ----> function ImageUpload({ username }) {}\n\t\t\t\t\t\t\t\t// As a result, we will be able to receive it here.\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\tsetProgress(0);\n\t\t\t\t\t\tsetCaption(\"\");\n\t\t\t\t\t\tsetImage(null);\n\t\t\t\t\t\t// after your done uploading,\n\t\t\t\t\t\t// set everything back to how it started,\n\t\t\t\t\t\t// with no progress, no caption, and no image path\n\t\t\t\t\t});\n\t\t\t}\n\t\t);\n\t};\n\n\treturn (\n\t\t<div className=\"imageupload\">\n\t\t\t<progress className=\"imageupload_progress\" value={progress} max=\"100\" />\n\t\t\t{/* this is the progress bar */}\n\n\t\t\t<input\n\t\t\t\ttype=\"text\"\n\t\t\t\tplaceholder=\"Enter a caption ...\"\n\t\t\t\tonChange={(event) => setCaption(event.target.value)}\n\t\t\t\t// onChange is a function that fires of an event\n\t\t\t\t// Every single time a key is pressed onChange will fire off\n\t\t\t\t// Then it will grab every single key that you typed (letter,number) on the input field\n\t\t\t\t// then we are going to set the caption\n\t\t\t\t// by combining all the different keys that were pressed into a string\n\t\t\t\tvalue={caption}\n\t\t\t/>\n\t\t\t{/*  */}\n\n\t\t\t<input type=\"file\" onChange={handleChange} />\n\t\t\t{/* Type=\"file\" for the input, gives you the ability to select files on click, from your computer, via the browser. \n                The function 'handleChange' will declare what happens when you click a file*/}\n\n\t\t\t<Button className=\"imageupload_button\" onClick={handleUpload}>\n\t\t\t\tUpload\n\t\t\t</Button>\n\t\t\t{/* This is a material ui button. */}\n\t\t</div>\n\t);\n}\n\nexport default ImageUpload;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Post from \"./Post\";\nimport { db } from \"./firebase\";\nimport { auth } from \"firebase\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Modal from \"@material-ui/core/Modal\";\nimport { Button, Input } from \"@material-ui/core\";\nimport ImageUpload from \"./ImageUpload\";\n// import InstagramEmbed from \"react-instagram-embed\";\n\n// Beginning of material ui styles;\n// this is copied and pasted from https://material-ui.com/components/modal/#modal\n\nfunction getModalStyle() {\n\tconst top = 50;\n\tconst left = 50;\n\n\treturn {\n\t\ttop: `${top}%`,\n\t\tleft: `${left}%`,\n\t\ttransform: `translate(-${top}%, -${left}%)`\n\t};\n}\n\nconst useStyles = makeStyles((theme) => ({\n\tpaper: {\n\t\tposition: \"absolute\",\n\t\twidth: 400,\n\t\tbackgroundColor: theme.palette.background.paper,\n\t\tborder: \"2px solid #000\",\n\t\tboxShadow: theme.shadows[5],\n\t\tpadding: theme.spacing(2, 4, 3)\n\t}\n}));\n\n// end of material ui styles\n\n//! -----------------------------------------------END OF IMPORTS\n\nfunction App() {\n\t//\n\n\tconst classes = useStyles();\n\t// In the material ui styles,\n\t// the makestyles Hook (which has the styles) is stored in the useStyles variable.\n\t// Here, the useStyles variable is stored in the variable 'classses'\n\n\t//! -------------- ALL USESTATES BELOW\n\n\tconst [posts, setPosts] = useState([]);\n\t// When you are using the firebase data base to import all the data,\n\t// we don't have to insert the data in the use useState (see commits from aug 19, on info on how to use useState).\n\t// Instead you just need to have the single line: const [posts, setPosts] = useState([]);\n\t// (posts)  The constant posts contains an array\n\t// (setPosts) And we declare that we will mainpulate this array\n\t// By wrapping the array in a UseState()\n\n\tconst [modalStyle] = useState(getModalStyle);\n\t// This is to get the modal styles from material ui\n\n\tconst [openSignUp, setOpenSignUp] = useState(false);\n\t// (openSignUp)  The constant openSignUp is not being rendered/used\n\t// (setOpenSignUp) And we declare that we will mainpulate the values stored in this constant after its rendered\n\t// By wrapping it in a UseState()\n\t// This is for signing up a new user via the modal.\n\t// The modal is a popup that appears when the Sign up button is clicked.\n\t// When the modal popup occurs, it will contain a form,\n\t// where the user can sign up with his username, email, and password.\n\n\tconst [openSignIn, setOpenSignIn] = useState(false);\n\t// (openSignIn)  The constant openSignIn is not being rendered/used\n\t// (setOpenSignIn) And we declare that we will mainpulate the values stored in this constant after its rendered\n\t// By wrapping it in a UseState()\n\t// This is for signing in an old user via the modal.\n\t// The modal is a popup that appears when the Sign in button is clicked.\n\t// When the modal popup occurs, it will contain a form,\n\t// where the user can sign in with his username and password\n\n\tconst [username, setUsername] = useState(\"\");\n\t// (username) The constant username contains a string\n\t// (setUsername) And we declare that we will mainpulate this string\n\t// By wrapping the string in a UseState()\n\t// this is an input-field in the form (which is in the modal)\n\t// the input field is imported vial material ui\n\n\tconst [email, setEmail] = useState(\"\");\n\t// (email)  The constant email contains a string\n\t// (setEmail) And we declare that we will mainpulate this string\n\t// By wrapping the string in a UseState()\n\t// this is an input-field in the form (which is in the modal)\n\t// the input field is imported vial material ui\n\n\tconst [password, setPassword] = useState(\"\");\n\t// (password) The constant password contains a string\n\t// (setPassword) And we declare that we will mainpulate this string\n\t// By wrapping the string in a UseState()\n\t// this is an input-field in the form (which is in the modal)\n\t// the input field is imported vial material ui\n\n\tconst [user, setUser] = useState(null);\n\t// this will keep track of the user\n\t// CHANGE THIS TO SIGNEDINUSER\n\n\t//! ----------FIRST USE EFFECT BELOW - UseEffect runs a piece of code based on a specific condition\n\n\tuseEffect(() => {\n\t\tconst unsubscribe = auth().onAuthStateChanged((authUser) => {\n\t\t\t// this is going to listen, and it gives us something called an 'authuser'\n\t\t\t// this will fire off every single time any authentication change happens\n\t\t\t// (ex: logging in, loggin out, creating user, deleting user, etc)\n\t\t\tif (authUser) {\n\t\t\t\t// if the user has logged in\n\t\t\t\tconsole.log(authUser);\n\t\t\t\t// console.log that that user is logged in\n\t\t\t\tsetUser(authUser);\n\t\t\t\t// capture that user inside of our state.\n\t\t\t\t// This also ensures that user data survives refresh.\n\t\t\t\t// Ex: if max is logged in and then he refreshed,\n\t\t\t\t// react will be able to see that hes still logged in, because it uses cookie tracking\n\t\t\t\t// and then it would set the state(as being logged in).\n\t\t\t} else {\n\t\t\t\t// if the user has logged out\n\t\t\t\tsetUser(null);\n\t\t\t\t// set the user to null\n\t\t\t}\n\t\t});\n\n\t\treturn () => {\n\t\t\t// perform some cleanup actions\n\n\t\t\tunsubscribe();\n\t\t};\n\n\t\t// Unlike the next useEffect below\n\t\t// we don't want to run this code only once when the app component loads, and don't run it again.\n\t\t// In this situation, since we are repeteadly updating the user and username,\n\t\t// we want this useEffect to be fired of everytime the user/username changes.\n\t\t// Hence, we have to the include them as dependencies.\n\t}, [user, username]);\n\n\t//! -----------SECOND USE EFFECT BELOW - UseEffect runs a piece of code based on a specific condition\n\n\tuseEffect(\n\t\t() => {\n\t\t\t// this is where the code runs\n\t\t\tdb.collection(\"posts\")\n\t\t\t\t// Get the posts inside firebase\n\t\t\t\t.orderBy(\"timestamp\", \"desc\")\n\t\t\t\t// order the posts based on timestamp in descending order (top post = most recent post)\n\t\t\t\t.onSnapshot((snapshot) => {\n\t\t\t\t\t// Use onsnapshot\n\t\t\t\t\t// Onsnapshot is a really powerful listener\n\t\t\t\t\t// every single time the data base changes in that collection,\n\t\t\t\t\t// every single time a document gets added, modified, changed inside a post,\n\t\t\t\t\t// a camera is going to take a snapshot of exactly what that data collection looks like\n\t\t\t\t\tsetPosts(\n\t\t\t\t\t\tsnapshot.docs.map((doc) => ({\n\t\t\t\t\t\t\t// from that snapshot, get all documents, map through every single document((snapshot.docs.map((doc))\n\t\t\t\t\t\t\tid: doc.id,\n\t\t\t\t\t\t\t// get the documents id  (in firebase database, the id is the number under the add document tab)\n\t\t\t\t\t\t\tpost: doc.data()\n\t\t\t\t\t\t\t// get the document data (doc.data) --> data includes each docs properties and values (caption, username, image, etc )\n\t\t\t\t\t\t}))\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t},\n\t\t// the below line means: whenever the page refreshs, and the conditional is satisfied,\n\t\t// run this code only once when the app component loads, and don't run it again.\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t\t[]\n\t);\n\n\t//! -----------BELOW IS THE SIGN UP FUNCTION - THIS IS USED TO SIGN NEW USERS UP\n\n\tconst signUp = (event) => {\n\t\t// The variable sign up stores the code that will signup new users, via the firebase authentication\n\n\t\tevent.preventDefault();\n\t\t// this stops the form for acting weird\n\n\t\tauth()\n\t\t\t.createUserWithEmailAndPassword(email, password)\n\t\t\t// this line gives you the ability to create a new user and password\n\n\t\t\t.then((authUser) => {\n\t\t\t\t// then if we just created a new user\n\t\t\t\t// and in our state we have the username that the user just typed in\n\t\t\t\t// go to the user that you just logged in with\n\t\t\t\t// update their profile and set the displayname as the username\n\t\t\t\tauthUser.user.updateProfile({\n\t\t\t\t\tdisplayName: username\n\t\t\t\t});\n\t\t\t})\n\n\t\t\t.catch((error) => alert(error.message));\n\t\t// if there are any errors, then make an alert\n\t};\n\n\t//! -----------BELOW IS THE SIGN IN FUNCTION - THIS IS USED TO SIGN REGISTERED USERS IN\n\n\tconst signIn = (event) => {\n\t\t// The variable signIn stores the code that will sign in registered users, via the firebase authentication\n\n\t\tevent.preventDefault();\n\t\t// this stops the form for acting weird\n\n\t\tauth()\n\t\t\t.signInWithEmailAndPassword(email, password)\n\t\t\t// this line gives you the ability to sign in a user, via their email and password\n\n\t\t\t.catch((error) => alert(error.message));\n\t\t// if there are any errors, then make an alert\n\n\t\tsetOpenSignIn(false);\n\t\t// after we sign in, we don't want the sign in modal to be open\n\t\t// so setOpenSignIn(false); will close the modal once you sign in\n\t};\n\n\t// --------------\n\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<Modal open={openSignUp} onClose={() => setOpenSignUp(false)}>\n\t\t\t\t{/* This is the Sign Up modal. It will popup when the signup button is clicked.\n\t\t\t\t\t\tOnClose is listening for any clicks outside of the modal.\n\t\t\t\t\t\tEvery time that you click outside of the modal \n\t\t\t\t\t\tthe state of the modal will be set to false (i.e, the modal will close).\n\t\t\t\t\t\tThe logic operating inside of the 'onClose' function is handled by material U.I.\n\t\t\t\t*/}\n\t\t\t\t<div style={modalStyle} className={classes.paper}>\n\t\t\t\t\t<form>\n\t\t\t\t\t\t<center className=\"app_signup\">\n\t\t\t\t\t\t\t{/* the center tag will ensure that everything is centered */}\n\t\t\t\t\t\t\t{/* this is the content that appears inside the modal */}\n\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\tclassName=\"app_headerImage\"\n\t\t\t\t\t\t\t\tsrc=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n\t\t\t\t\t\t\t\talt=\"\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tplaceholder=\"username\"\n\t\t\t\t\t\t\t\tvalue={username}\n\t\t\t\t\t\t\t\tonChange={(e) => setUsername(e.target.value)}\n\t\t\t\t\t\t\t\t// onChange is a function that fires of an event\n\t\t\t\t\t\t\t\t// (e.target.value) the event will target the value (i.e, grab the typed username)\n\t\t\t\t\t\t\t\t// (setUsername) and store this value as the username\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tplaceholder=\"email\"\n\t\t\t\t\t\t\t\tvalue={email}\n\t\t\t\t\t\t\t\tonChange={(e) => setEmail(e.target.value)}\n\t\t\t\t\t\t\t\t// onChange is a function that fires of an event\n\t\t\t\t\t\t\t\t// (e.target.value) the event will target the value (i.e, grab the typed email)\n\t\t\t\t\t\t\t\t// (setEmail) and store this value as the users email\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tplaceholder=\"password\"\n\t\t\t\t\t\t\t\tvalue={password}\n\t\t\t\t\t\t\t\tonChange={(e) => setPassword(e.target.value)}\n\t\t\t\t\t\t\t\t// onChange is a function that fires of an event\n\t\t\t\t\t\t\t\t// (e.target.value) the event will target the value (i.e, grab the typed password)\n\t\t\t\t\t\t\t\t// (setPassword) and store this value as the users password\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Button type=\"submit\" onClick={signUp}>\n\t\t\t\t\t\t\t\tSign up\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</center>\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t</Modal>\n\n\t\t\t<Modal open={openSignIn} onClose={() => setOpenSignIn(false)}>\n\t\t\t\t{/* This is the Sign in modal. It will popup up when the sign in buttton is clicked.\n\t\t\t\t\t\tOnClose is listening for any clicks outside of the modal.\n\t\t\t\t\t\tEvery time that you click outside of the modal \n\t\t\t\t\t\tthe state of the modal will be set to false (i.e, the modal will close).\n\t\t\t\t\t\tThe logic operating inside of the 'onClose' function is handled by material U.I.\n\t\t\t\t*/}\n\t\t\t\t<div style={modalStyle} className={classes.paper}>\n\t\t\t\t\t<form>\n\t\t\t\t\t\t<center className=\"app_signup\">\n\t\t\t\t\t\t\t{/* the center tag will ensure that everything is centered */}\n\t\t\t\t\t\t\t{/* this is the content that appears inside the modal */}\n\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\tclassName=\"app_headerImage\"\n\t\t\t\t\t\t\t\tsrc=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n\t\t\t\t\t\t\t\talt=\"\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tplaceholder=\"email\"\n\t\t\t\t\t\t\t\tvalue={email}\n\t\t\t\t\t\t\t\tonChange={(e) => setEmail(e.target.value)}\n\t\t\t\t\t\t\t\t// onChange is a function that fires of an event\n\t\t\t\t\t\t\t\t// (e.target.value) the event will target the value (i.e, grab the typed email)\n\t\t\t\t\t\t\t\t// (setEmail) and store this value as the users email\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tplaceholder=\"password\"\n\t\t\t\t\t\t\t\tvalue={password}\n\t\t\t\t\t\t\t\tonChange={(e) => setPassword(e.target.value)}\n\t\t\t\t\t\t\t\t// onChange is a function that fires of an event\n\t\t\t\t\t\t\t\t// (e.target.value) the event will target the value (i.e, grab the typed password)\n\t\t\t\t\t\t\t\t// (setPassword) and store this value as the users password\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Button type=\"submit\" onClick={signIn}>\n\t\t\t\t\t\t\t\tSign In\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</center>\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t</Modal>\n\n\t\t\t{/* THE ABOVE MODALS ARE NOT VISIBLE - THEY ONLY APPEAR WHEN THE BUTTONS ASSOCIATED WITH THEM ARE CLICKED */}\n\t\t\t{/* The ACTUAL CONTENT ON THE PAGE BEGINS HERE */}\n\n\t\t\t<div className=\"app_header\">\n\t\t\t\t<img\n\t\t\t\t\tclassName=\"app_headerImage\"\n\t\t\t\t\tsrc=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n\t\t\t\t\talt=\"\"\n\t\t\t\t/>\n\n\t\t\t\t{user ? (\n\t\t\t\t\t// if the user is logged in then\n\n\t\t\t\t\t<Button onClick={() => auth().signOut()}> Sign out </Button> // display a Sign out button - this button will use the firebase 'auth().signOut' to sign out the user.\n\t\t\t\t) : (\n\t\t\t\t\t// OR if the user is not logged in  then\n\t\t\t\t\t<div className=\"app_loginContainer\">\n\t\t\t\t\t\t<Button onClick={() => setOpenSignIn(true)}> Sign in </Button>\n\t\t\t\t\t\t{/* Display a sign in button */}\n\t\t\t\t\t\t{/* When its clicked the OpenSignIn modal will popup. */}\n\t\t\t\t\t\t{/* This modal will use the signIn function to sign a user in */}\n\n\t\t\t\t\t\t<Button onClick={() => setOpenSignUp(true)}> Sign up </Button>\n\t\t\t\t\t\t{/* Display a sign up button  */}\n\t\t\t\t\t\t{/* When its clicked the OpenSignUp modal will popup. */}\n\t\t\t\t\t\t{/* This will use the signUp function to sign a user up  */}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\n\t\t\t<div className=\"app_posts\">\n\t\t\t\t<div className=\"app_postsLeft\">\n\t\t\t\t\t{posts.map(({ id, post }) => (\n\t\t\t\t\t\t// map through posts, grab each document id, and document post\n\t\t\t\t\t\t<Post\n\t\t\t\t\t\t\t// posts each documents id and post-data (properties and values) incrementally\n\t\t\t\t\t\t\tkey={id}\n\t\t\t\t\t\t\t// Adding the id ensures that react only refreshes new posts\n\t\t\t\t\t\t\t// For example: if you have 99 posts, and you add a new post,\n\t\t\t\t\t\t\t// then all 100 will not get refreshed when the page reloads.\n\t\t\t\t\t\t\t// Instead, react (via the virtual dom) is going to:\n\t\t\t\t\t\t\t// [a] keep the old posts on the page (without refreshing them)\n\t\t\t\t\t\t\t// [b] add the new post to the page\n\t\t\t\t\t\t\tpostId={id}\n\t\t\t\t\t\t\t// (in firebase database, the postId is the number under the add document tab)\n\t\t\t\t\t\t\t// each post has a specific number associated with\n\t\t\t\t\t\t\tuser={user}\n\t\t\t\t\t\t\t// this is the user who signed in\n\t\t\t\t\t\t\t// it is not limited to the user who posted an image\n\t\t\t\t\t\t\t// ex: if a user who signed in to only comment, then this would be able to grab that user\n\t\t\t\t\t\t\tusername={post.username}\n\t\t\t\t\t\t\tcaption={post.caption}\n\t\t\t\t\t\t\timageUrl={post.imageUrl}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t\t{/* <div className=\"app_postsRight\">\n\t\t\t\t\t<InstagramEmbed\n\t\t\t\t\t\turl=\"https://instagr.am/p/Zw9o4/\"\n\t\t\t\t\t\tmaxWidth={320}\n\t\t\t\t\t\thideCaption={false}\n\t\t\t\t\t\tcontainerTagName=\"div\"\n\t\t\t\t\t\tprotocol=\"\"\n\t\t\t\t\t\tinjectScript\n\t\t\t\t\t\tonLoading={() => {}}\n\t\t\t\t\t\tonSuccess={() => {}}\n\t\t\t\t\t\tonAfterRender={() => {}}\n\t\t\t\t\t\tonFailure={() => {}}\n\t\t\t\t\t/>\n\t\t\t\t</div> */}\n\t\t\t</div>\n\n\t\t\t{/* In the App, there is a image upload component.\n\t\t\tThis allows the user to upload a new image and caption to the page.\n\t\t\tWe only want to display the image upload component,\n\t\t\tif they user is logged in. If they user is not logged in,\n\t\t\twe want to tell the user to either sign up or login.*/}\n\n\t\t\t{user?.displayName ? (\n\t\t\t\t// If the username is being displayed (i.e, user is logged in)\n\t\t\t\t// Even if the User might be undefined (we have inserted the optional (?) to deal with a potentialy undefined user)\n\t\t\t\t// The optional says: if this is not there, then don't freak out and break\n\n\t\t\t\t<ImageUpload username={user.displayName} /> // then display the image upload component\n\t\t\t) : (\n\t\t\t\t// OR --> if the this is not the case\n\n\t\t\t\t<h3> Login to upload</h3>\n\t\t\t\t// display this h3 tag\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.js\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}